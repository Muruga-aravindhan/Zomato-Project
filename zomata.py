# -*- coding: utf-8 -*-
"""ZOMATA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aAtV1cBYoNbWd6csxsVfxyi-DgZwW3il
"""

#pip install mysql-connector-python
import streamlit as st
import pandas as pd
import numpy as np


import mysql.connector

class zen:
  def __init__(self,host,user,password,port,database):
    self.host = host
    self.user = user
    self.password = password
    self.port = port
    self.database = database
    self.conn = None
    self.cursor = None
  def connect(self):
    self.conn = mysql.connector.connect(host = self.host, user = self.user, password = self.password, port = self.port, database = self.database )
    self.cursor = self.conn.cursor()
    print("connection sucessful")
  def create_table(self,table_query):
    self.cursor.execute(table_query)
    self.conn.commit()
  def insert_into_list_tuple(self,inser_query,list_tuple):
    self.cursor.executemany(inser_query,list_tuple)
    self.conn.commit()
    print("insert sucessful")

# creating connection sql and Python
config ={"host":"gateway01.ap-southeast-1.prod.aws.tidbcloud.com", "user" : "2k28pcyNk66J4wT.root", "port":4000, "password":"MJfUrQWyu2HIZEBk", "database":"Zomata"}
db_obj = zen(**config)

db_obj.connect()

# Create Customers Table

TQ = "create table customers (customer_id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL, email VARCHAR(100) NOT NULL UNIQUE, phone VARCHAR(15), location VARCHAR(100), signup_date DATE, is_premium BOOLEAN, preferred_cuisine VARCHAR(50), total_orders INT, average_rating FLOAT)"
db_obj.create_table(TQ)

# Create Restaurants Table
TQ = "create table restaurants (restaurant_id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL, cuisine_type VARCHAR(50), location VARCHAR(100), owner_name VARCHAR(100), average_delivery_time INT, contact_number VARCHAR(15), rating FLOAT, total_orders INT, is_active BOOLEAN)"
db_obj.create_table(TQ)

# Create Orders Table
TQ = "create table orders (order_id INT AUTO_INCREMENT PRIMARY KEY, customer_id INT, restaurant_id INT, order_date DATETIME, delivery_time TIME, status VARCHAR(50), total_amount FLOAT, payment_mode VARCHAR(50), discount_applied FLOAT, feedback_rating FLOAT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id), FOREIGN KEY (restaurant_id) REFERENCES Restaurants(restaurant_id))"
db_obj.create_table(TQ)

# craeate Deliveries Table
TQ = "create table deliveries (delivery_id INT AUTO_INCREMENT PRIMARY KEY, order_id INT, delivery_person_id INT, delivery_status VARCHAR(50), distance FLOAT, delivery_time INT, estimated_time INT, delivery_fee FLOAT, vehicle_type VARCHAR(50), FOREIGN KEY (order_id) REFERENCES Orders(order_id))"
db_obj.create_table(TQ)

# craete Delivery Persons Table
TQ = "create table delivery_persons (delivery_person_id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL, contact_number VARCHAR(15), vehicle_type VARCHAR(50), total_deliveries INT, average_rating FLOAT, location VARCHAR(100))"
db_obj.create_table(TQ)

#pip install Faker

from faker import Faker
import random

fake = Faker("en_IN")

cus_t = []
for i in range(1,301):
    cus_t.append((fake.name(), fake.email(),fake.phone_number(), fake.city(), fake.date_between(start_date='-1y', end_date='today'), fake.boolean(), random.choice(["Indian", "Chinese", "Italian", "Mexican"]), random.randint(1, 100), round(random.uniform(1, 5), 2)))
cus_t

IQ = "insert into customers  (name, email, phone, location, signup_date, is_premium, preferred_cuisine, total_orders, average_rating) values (%s,%s,%s,%s,%s,%s,%s,%s,%s)"
db_obj.insert_into_list_tuple(IQ, cus_t)

res_t = []
r =["Restaurant"]
for i in range(1,201):
  res_t.append((f"{fake.unique.company()} {fake.random_element(r)}", random.choice(["Indian", "Chinese", "Italian", "Mexican"]), fake.city(), fake.name(), random.randint(20, 60), fake.phone_number(), round(random.uniform(1, 5), 2), random.randint(1, 500), fake.boolean()))
res_t

# inserting data into restaurants table
IQ = "insert into restaurants (name, cuisine_type, location, owner_name, average_delivery_time, contact_number, rating, total_orders, is_active) values (%s,%s,%s,%s,%s,%s,%s,%s,%s)"
db_obj.insert_into_list_tuple(IQ, res_t )

import random
customer_ids = random.sample(range(1, 301), 300)
restaurant_ids = random.sample(range(1, 201), 200)
ord_t = []
for i in range(1,1001):
  ord_t.append((random.choice(customer_ids),random.choice(restaurant_ids),fake.date_time_between(start_date='-1y', end_date='now'),fake.time(),random.choice(["Pending", "Delivered", "Cancelled"]),round(random.uniform(100, 1000), 2),random.choice(["Credit Card", "Cash", "UPI"]),round(random.uniform(0, 100), 2), round(random.uniform(1, 5), 2)))
ord_t

# inserting data into orders table
IQ = "insert into orders (customer_id, restaurant_id, order_date, delivery_time, status, total_amount, payment_mode, discount_applied, feedback_rating) values (%s,%s,%s,%s,%s,%s,%s,%s,%s)"
db_obj.insert_into_list_tuple(IQ, ord_t)

delper_t = []
for i in range(1,501):
  delper_t.append((fake.name(),fake.phone_number(),random.choice(["Bike", "Car"]),random.randint(1, 100),round(random.uniform(1, 5), 2),fake.city()))
delper_t

IQ = "insert into delivery_persons (name, contact_number, vehicle_type, total_deliveries, average_rating, location) values (%s,%s,%s,%s,%s,%s)"
db_obj.insert_into_list_tuple(IQ, delper_t)

import random
order_ids = random.sample(range(1, 1001), 1000)
delivery_person_ids = random.sample(range(1, 501), 500)
delivery_t = []
for i in range(1,1001):
  delivery_t.append((random.choice(order_ids), random.choice(delivery_person_ids), random.choice(["pick the order now", "On the way", "Delivered"]), round(random.uniform(1, 20), 2), random.randint(10, 60), random.randint(10, 60), round(random.uniform(20, 100), 2), random.choice(["Bike", "Car"])))
delivery_t

IQ = "insert into deliveries (order_id, delivery_person_id, delivery_status, distance, delivery_time, estimated_time, delivery_fee, vehicle_type) values (%s,%s,%s,%s,%s,%s,%s,%s)"
db_obj.insert_into_list_tuple(IQ, delivery_t)




